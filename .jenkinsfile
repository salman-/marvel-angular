pipeline {
    agent any

    environment {
        CHROME_BIN = "/usr/bin/google-chrome"
        DOCKER_CONFIG = "${env.WORKSPACE}/.docker"
        IMAGE = 'salmanprivatedockerregistery.azurecr.io/marvel-app'
    }

    stages {
        stage('Preparation') {
            steps {
                checkout scm
            }
        }
        stage('Install dependencies') {
            steps {
                sh "pwd"
                sh "npm --version"
                sh 'npm install'
                sh 'npm install http-server'
                sh 'npm install @angular/cli'
                sh "./node_modules/.bin/ng version"
            }
        }
        stage('Build') {
            steps {
                sh './node_modules/.bin/ng build'
            }
        }
        stage('Test') {
            steps {
                sh './node_modules/.bin/ng test --watch=false --browsers ChromeHeadless'
            }
        }
        stage('Deploy') {
            steps {
                withCredentials([
                    string(credentialsId: 'AZURE_TENANT_ID', variable: 'AZURE_TENANT_ID'),
                    string(credentialsId: 'AZURE_CLIENT_ID', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'AZURE_CLIENT_SECRET', variable: 'AZURE_CLIENT_SECRET')
                ]) {
                    sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID'

                    script {
                        def acrLoginCommand = "az acr login --name salmanprivatedockerregistery --expose-token --output tsv --query accessToken"
                        def acrToken = sh(script: acrLoginCommand, returnStdout: true).trim()
                        def dockerConfigJson = """{
                            "auths": {
                                "salmanprivatedockerregistery.azurecr.io": {
                                    "auth": "${acrToken}"
                                }
                            }
                        }"""
                        writeFile file: "${DOCKER_CONFIG}/config.json", text: dockerConfigJson
                    }

                    sh 'docker version || echo "Cannot connect to the Docker daemon"'
                    sh 'groups || echo "Current user groups"'
                    sh """
                    docker login salmanprivatedockerregistery.azurecr.io --username $AZURE_CLIENT_ID --password $AZURE_CLIENT_SECRET
                    docker build -t ${IMAGE} .
                    docker push ${IMAGE}
                    """
                }
            }
        }
    }
    post {
        always {
            echo 'This will always run regardless of the build status.'
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
